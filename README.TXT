СRUDVK - это простое приложение CRUD (Create, Read, Update, Delete), написанное на Go. Оно предоставляет базовые функции для управления книгами и пользователями, с акцентом на безопасность аутентификации и кэширование данных.

Особенности и возможности приложения:
• Управление книгами: Создание, чтение, обновление и удаление книг. Кэширование данных для повышения производительности.
• Управление пользователями: Регистрация и аутентификация пользователей. Генерация JWT-токенов для безопасной аутентификации.
• Безопасность: Хеширование паролей пользователей. Использование JWT для аутентификации.

Установка:
1. Клонируйте репозиторий:
   git clone https://github.com/yourusername/CRUDVk.git
   cd CRUDVk

2. Установите зависимости:
   go mod download

3. Настройте файл .env:
   - Создайте файл .env в корне проекта.
   - Добавьте в него следующие переменные:
     JWT_SECRET_KEY=your_secret_key

4. Настройте базу данных:
   - Убедитесь, что у вас установлен MySQL.
   - Создайте базу данных с именем CRUDDATABASE.
   - Обновите строку подключения в main.go:
     dsn := "root:12345@tcp(127.0.0.1:3306)/CRUDDATABASE?utf8mb4&parseTime=True&loc=Local"

5. Запустите приложение:
   go run cmd/main.go


///////////////////////////////
Docker-compose: в разработке...
///////////////////////////////

Использование:
После запуска приложения вы можете использовать API для управления книгами и пользователями. Примеры запросов приведены ниже.

API:
1. Управление книгами
   • Создание книги: Пользователи могут добавлять новые книги в систему, указывая такие детали, как название, автор и издатель.
   • Получение списка книг: Пользователи могут получить список всех книг, доступных в системе.
   • Получение книги по ID: Пользователи могут получить информацию о конкретной книге по ее уникальному идентификатору (ID).
   • Обновление книги: Пользователи могут обновлять информацию о своей книге.
   • Удаление книги: Пользователи могут удалить свою книгу из системы.

2. Управление пользователями
   • Регистрация пользователя
   • Аутентификация и авторизация пользователя 

////////////////////////
Testing: в разработке...
////////////////////////


Документация:
Структура проекта:
- cmd/main.go: Основной файл приложения.
- internal/models: Определение моделей данных (книги, пользователи).
- internal/repository: Репозитории для работы с базой данных.
- internal/service: Сервисы для бизнес-логики.
- internal/transport/handler: Обработчики HTTP запросов.
- internal/transport/middleware: Middleware.
- pkg/db: Утилиты для работы с базой данных.
- cache.go: Реализация кэша.

Основные компоненты:
- main.go: Загрузка переменных окружения, инициализация базы данных, сервисов и сервера.
- server.go: Настройка и запуск HTTP сервера.
- book.go: Обработчики запросов для управления книгами.
- user.go: Обработчики запросов для управления пользователями.
- jwt.go: Middleware для JWT аутентификации.
- bookService.go: Сервис для работы с книгами.
- userService.go: Сервис для работы с пользователями.
- bookRepository.go: Репозиторий для работы с книгами в базе данных.
- userRepository.go: Репозиторий для работы с пользователями в базе данных.
- cache.go: Реализация кэша.

Резюмируя:
CRUDVk предоставляет простой и безопасный способ управления книгами и пользователями. Благодаря использованию JWT для аутентификации и кэшированию данных, приложение обеспечивает высокую производительность и безопасность.
