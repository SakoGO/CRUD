СRUDVK - это простое приложение CRUD (Create, Read, Update, Delete), написанное на Go. Оно предоставляет базовые функции для управления книгами и пользователями, с акцентом на безопасность аутентификации и кэширование данных.

Features:
• Управление книгами: Создание, чтение, обновление и удаление книг. Кэширование данных для повышения производительности.
• Управление пользователями: Регистрация и аутентификация пользователей. Генерация JWT-токенов для безопасной аутентификации.
• Безопасность: Хеширование паролей пользователей. Использование JWT для аутентификации.

Installation:
1. Клонируйте репозиторий:
   git clone https://github.com/yourusername/CRUDVk.git
   cd CRUDVk

2. Установите зависимости:
   go mod download

3. Настройте файл .env:
   - Создайте файл .env в корне проекта.
   - Добавьте в него следующие переменные:
     JWT_SECRET_KEY=your_secret_key

4. Настройте базу данных:
   - Убедитесь, что у вас установлен MySQL.
   - Создайте базу данных с именем CRUDDATABASE.
   - Обновите строку подключения в main.go:
     dsn := "root:12345@tcp(127.0.0.1:3306)/CRUDDATABASE?utf8mb4&parseTime=True&loc=Local"

5. Запустите приложение:
   go run cmd/main.go

///////////////////////////////
Docker-compose: в разработке...
///////////////////////////////

Usage:
После запуска приложения вы можете использовать API для управления книгами и пользователями. Примеры запросов приведены ниже.

API:

- Книги:
  - Создание книги: POST /books_add
    Тело запроса:
    {
      "title": "Название книги",
      "author": "Автор",
      "publisher": "Издатель"
    }

  - Получение всех книг: GET /books_get

  - Получение книги по ID: GET /books_get_id/{id}

  - Обновление книги: PUT /books_update/{id}
    Тело запроса:
    {
      "title": "Новое название",
      "author": "Новый автор",
      "publisher": "Новый издатель"
    }

  - Удаление книги: DELETE /books_delete/{id}

- Пользователи:
  - Регистрация пользователя: POST /user_create
    Тело запроса:
    {
      "username": "Имя пользователя",
      "email": "email@example.com",
      "password": "пароль"
    }

  - Аутентификация пользователя: POST /user_login
    Тело запроса:
    {
      "username": "Имя пользователя",
      "password": "пароль"
    }

////////////////////////
Testing: в разработке...
////////////////////////


Documentation:
Структура проекта:
- cmd/main.go: Основной файл приложения.
- internal/models: Определение моделей данных (книги, пользователи).
- internal/repository: Репозитории для работы с базой данных.
- internal/service: Сервисы для бизнес-логики.
- internal/transport/handler: Обработчики HTTP запросов.
- internal/transport/middleware: Middleware для аутентификации.
- pkg/db: Утилиты для работы с базой данных.
- cache.go: Реализация кэша.

Основные компоненты:
- main.go: Загрузка переменных окружения, инициализация базы данных, сервисов и сервера.
- server.go: Настройка и запуск HTTP сервера.
- book.go: Обработчики запросов для управления книгами.
- user.go: Обработчики запросов для управления пользователями.
- jwt.go: Middleware для JWT аутентификации.
- bookService.go: Сервис для работы с книгами.
- userService.go: Сервис для работы с пользователями.
- bookRepository.go: Репозиторий для работы с книгами в базе данных.
- userRepository.go: Репозиторий для работы с пользователями в базе данных.
- cache.go: Реализация кэша.

Conclusion:
CRUDVk предоставляет простой и безопасный способ управления книгами и пользователями. Благодаря использованию JWT для аутентификации и кэшированию данных, приложение обеспечивает высокую производительность и безопасность.
