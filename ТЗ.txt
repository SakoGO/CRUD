
Создать СRUD-приложение, предоставляющее Web API к данным
"Бизнес"-сущность придумывается самостоятельно (на примере books).
API
Приложение должно уметь посредством НТТР-запросов:
1. Получить по id (GET \book)
2. Получить список всех сущностей (GET \books)
3. Создать (РOST/PUT)
4. Обновить сущность по id (POST/PUT)
5. Удалить сущность по id (DELETE)
Go
Использовать gofmt, goimports для code style
Логировать ошибки любым логгером на Ваш выбор
Для передачи данных использовать ЈЅОN
Для роутинга использовать любую библиотеку на Ваш выбор.
Хранилище данных на Ваш выбор: PostgreSQL, MSSQL, MYSQL, MongoDB, итд Для работы с реляционными БД использовать SQL/ORM
Git
Ваш код должен находиться в Git-репозитории
B master ветке должна быть рабочая версия
Файл README обязателен. Добавить в него инструкцию по запуску Вашего приложения
Дополнительные задания со звездочкой
1. Кэширование запросов
2. Докеризация
3. Docker-compose
4. Авторизация
5. Автоматическое тестирование через Postman
6. Unit-тесты
7. Linter


/my-app
|-- /cmd
|   |-- /api
|       |-- main.go                # Точка входа (точка запуска приложения)
|-- /internal
|   |-- /handlers                  # Обработчики API
|   |   |-- book_handler.go         # Логика работы с книгами
|   |-- /models                    # Структуры и модели данных
|   |   |-- book.go                # Структура данных книги
|   |-- /store                     # Работа с базой данных (SQL)
|   |   |-- mysql.go               # Подключение к MySQL
|   |-- /middleware                # Мидлвари, если нужно (например, для логирования или авторизации)
|   |-- /cache                     # Логика для кэширования (например, с Redis)
|-- /pkg
|   |-- /utils                     # Утилитарные функции
|   |   |-- logger.go              # Логгер для логирования ошибок
|-- /api                           # Схемы данных, структуры для взаимодействия по API (например, для валидаторских структур)
|-- /docker
|   |-- Dockerfile                 # Dockerfile для контейнеризации
|   |-- docker-compose.yml         # Docker Compose для работы с приложением и БД
|-- /scripts
|   |-- init_db.sql                # Скрипт для инициализации базы данных
|-- README.md                      # Документация по запуску
|-- go.mod                         # Зависимости Go
|-- go.sum
